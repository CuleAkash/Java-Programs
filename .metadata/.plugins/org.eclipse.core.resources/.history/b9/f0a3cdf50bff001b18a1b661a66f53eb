package BST;

import Implementation.BinaryTreeNode;
import Implementation.BinaryTreeUse;

public class LargestBSTinBinaryTree {

	public static void main(String[] args) {
		BinaryTreeNode<Integer> root= BinaryTreeUse.takingInput();
		BinaryTreeNode<Integer> modifiedRoot= largestBST(root);
		BinaryTreeUse.printTree(modifiedRoot);
		

	}

	private static BinaryTreeNode<Integer> largestBST(BinaryTreeNode<Integer> root) {
		LargestBSTReturn ans= helperLargestBST(root);
		return ans.root;
		
	}

	private static LargestBSTReturn helperLargestBST(BinaryTreeNode<Integer> root) {
	if(root==null) {
		LargestBSTReturn ans= new LargestBSTReturn();
		ans.height=0;
		ans.isBST=true;
		ans.maximum=Integer.MIN_VALUE;
		ans.minimum=Integer.MAX_VALUE;
		return ans;
	}
	LargestBSTReturn leftOutput= helperLargestBST(root.left);
	LargestBSTReturn rightOutput= helperLargestBST(root.right);
	LargestBSTReturn ans= new LargestBSTReturn();
	ans.isBST=true;
	
	if(leftOutput.maximum>=root.data) {
		ans.isBST=false;
	}
	if(rightOutput.minimum<root.data) {
		ans.isBST=false;
	}
	if(!leftOutput.isBST || !rightOutput.isBST) {
		ans.isBST=false;
	}
	
	if(ans.isBST) {
		ans.height=1+Math.max(leftOutput.height, rightOutput.height);
	}
	else {
		ans.height=Math.max(leftOutput.height, rightOutput.height);
	}
	
	ans.maximum= rightOutput.maximum;
	ans.minimum=leftOutput.minimum;
	return ans;
	
	
	
	
	
	
	
	
	
	
	
	}

}