package BST;

import Implementation.BinaryTreeNode;
import Implementation.BinaryTreeUse;

public class LargestBSTinBinaryTree {

	public static void main(String[] args) {
		BinaryTreeNode<Integer> root= BinaryTreeUse.takingInput();
		BinaryTreeNode<Integer> modifiedRoot= largestBST(root);
		BinaryTreeUse.printTree(modifiedRoot);
		

	}

	private static BinaryTreeNode<Integer> largestBST(BinaryTreeNode<Integer> root) {
		LargestBSTReturn ans= helperLargestBST(root);
		System.out.println(ans.root.data);
		return ans.root;
		
	}

	private static LargestBSTReturn helperLargestBST(BinaryTreeNode<Integer> root) {
		if(root==null) {
			int height=0;
			int maximum= Integer.MIN_VALUE;
			int minimum= Integer.MAX_VALUE;
			boolean isBST=true;
			LargestBSTReturn ans= new LargestBSTReturn();
			ans.height=height;
			ans.maximum=maximum;
			ans.minimum= minimum;
			ans.isBST=isBST;
			ans.root=root;
			return ans;
		}
		LargestBSTReturn leftOutput= helperLargestBST(root.left);
		LargestBSTReturn rightOutput= helperLargestBST(root.right);
		LargestBSTReturn ans= new LargestBSTReturn();
		if(leftOutput.isBST && rightOutput.isBST) {
			if(root.data>leftOutput.maximum && root.data<=rightOutput.minimum) {
				ans.isBST=true;
				ans.height=1+Math.max(leftOutput.height, rightOutput.height);
				ans.maximum= Math.max(root.data, Math.max(leftOutput.maximum, rightOutput.maximum));
				ans.minimum= Math.min(root.data, Math.min(leftOutput.minimum, rightOutput.minimum));
				ans.root=root;
				return ans;
			}
			else {
				if(leftOutput.height>=rightOutput.height) {
					ans.isBST=true;
					ans.root=leftOutput.root;
					ans.height=leftOutput.height;
				}
				else {
					ans.isBST=true;
					ans.root=rightOutput.root;
					ans.height=rightOutput.height;
				}
			}
		}
		if(leftOutput.isBST && !rightOutput.isBST) {
			ans.isBST= false;
			ans.root=leftOutput.root;
			ans.height=leftOutput.height;
		}
		if(!rightOutput.isBST && rightOutput.isBST) {
			ans.isBST=false;
			ans.root=rightOutput.root;
			ans.height=rightOutput.height;
		}
		ans.maximum= Math.max(root.data, Math.max(leftOutput.maximum, rightOutput.maximum));
		ans.minimum= Math.min(root.data, Math.min(leftOutput.minimum, rightOutput.minimum));
		return ans;
	}

}
